# show in tootips how 
hfe_decision_plague_test_fraction_of_immune = {
	owned_planets_only = yes
	sound = event_administrative_work
	resources = {
		category = decisions
		cost = {
			energy = 20
		}
	}
	potential = {
		exists = owner
		owner = {
			has_technology = hfe_tech_plague_study
			is_ai = no
		}
	}
	allow = {
		custom_tooltip = {
			fail_text = hfe_decision_plague_fail
			has_planet_flag = hfe_plague_planet
		}
	}
	effect = {
		if = {
			limit = {
				check_variable = {
					which = hfe_plague_all_pops
					value > 0
				}
			}
			custom_tooltip = hfe_decision_plague_test_fraction_of_immune_tooltip
		}
		hidden_effect = {
			set_variable = {
				which = hfe_plague_all_pops
				value = 0
			}
			set_variable = {
				which = hfe_plague_natural_immune_pops
				value = 0
			}
			set_variable = {
				which = hfe_plague_immune_pops
				value = 0
			}
			every_owned_pop = {
				prev = {
					change_variable = {
						which = hfe_plague_all_pops
						value = 1
					}
				}
				if = {
					limit = {
						hfe_trigger_plague_is_immune = yes
						not = {
							has_pop_flag = hfe_plague_pop_immune
						}
					}
					prev = {
						change_variable = {
							which = hfe_plague_natural_immune_pops
							value = 1
						}
					}
				}
				else_if = {
					limit = {
						hfe_trigger_plague_is_immune = yes
					}
					prev = {
						change_variable = {
							which = hfe_plague_immune_pops
							value = 1
						}
					}
				}
			}
			divide_variable = {
				which = hfe_plague_natural_immune_pops
				value = hfe_plague_all_pops
			}
			# rounding it
			divide_variable = {
				which = hfe_plague_natural_immune_pops
				value = 10
			}
			multiply_variable = {
				which = hfe_plague_natural_immune_pops
				value = 1000
			}
			divide_variable = {
				which = hfe_plague_immune_pops
				value = hfe_plague_all_pops
			}
			# rounding it
			# TODO use new variable things from 3.0
			divide_variable = {
				which = hfe_plague_immune_pops
				value = 10
			}
			multiply_variable = {
				which = hfe_plague_immune_pops
				value = 1000
			}
		}
	}
	ai_weight = {
		weight = 0
	}
}

# for psionic
hfe_decision_plague_psi_clear = {
	owned_planets_only = yes
	sound = event_mystic_reveal
	icon = decision_surreal_visions
	resources = {
		category = decisions
		cost = {
			energy = 200
			influence = 25
		}
	}
	potential = {
		exists = owner
		owner = {
			has_tradition = tr_psionics_psionic_assimilation
			has_technology = hfe_tech_plague_study
		}
	}
	allow = {
		custom_tooltip = {
			fail_text = hfe_decision_plague_fail
			has_planet_flag = hfe_plague_planet
		}
	}
	effect = {
		hidden_effect = {
			hfe_effect_plague_planet_clean = yes
			every_owned_pop = {
				limit = {
					hfe_trigger_plague_is_immune = no
				}
				random = {
					chance = 10
					set_pop_flag = hfe_plague_pop_immune
				}
			}
		}
	}
	ai_weight = {
		weight = 300
	}
}

# bombardment
hfe_decision_plague_planet_bombardment = {
	owned_planets_only = yes
	sound = event_super_explosion
	icon = decision_colony_settlement
	resources = {
		category = decisions
		cost = {
			influence = 25
		}
	}
	potential = {
		owner = {
			has_technology = hfe_tech_plague_study
			hfe_trigger_plague_is_immune_species = no
			count_owned_planet = {
				limit = {
					not = {
						has_planet_flag = hfe_project_plague_planet_bombardment
					}
				}
				count > 1
			}
		}
		not = {
			has_planet_flag = hfe_project_plague_planet_bombardment
		}
	}
	allow = {
		custom_tooltip = {
			fail_text = hfe_decision_plague_fail
			has_planet_flag = hfe_plague_planet
		}
		owner = {
			allows_purge = yes
		}
	}
	effect = {
		save_event_target_as = hfe_project_plague_planet_bombardment_target
		enable_special_project = {
			name = hfe_project_plague_planet_bombardment
			owner = owner
			location = this
		}
		hidden_effect = {
			set_timed_planet_flag = {
				flag = hfe_project_plague_planet_bombardment
				years = 3
			}
		}
	}
	ai_weight = {
		weight = 1
		modifier = {
			factor = 0
			owner = {
				is_xenophobe = no
			}
			pop_percentage = {
				percentage < 0.2
				limit = {
					is_same_species = root.owner
				}
			}
		}
	}
}
